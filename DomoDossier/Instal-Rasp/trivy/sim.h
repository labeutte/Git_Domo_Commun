/**  * File:   SIM.h * Author: aucaigne */#ifndef SIM_H#define SIM_H#include <iostream>#include <string>     // std::string, std::to_string#include <time.h>#include<ctime>#include <string.h> #include <pthread.h>#include <vector>#include <sstream> #include "RCSwitch.h"#include "serieLin.h"#include "accesBDD.h"#include "internet.h"#include "compress.h"#include <list>#include <opencv/highgui.h>#include <opencv/cv.h>#include <cstring>using namespace std;struct infoXms {    unsigned char type; //0=SMS, 1=MMS, 2=SMS avec 1 seul destinat    string message;    string nomIm;    string chemIm;    int groupe;    string destin;};typedef struct infoXms stXm;class SIM {private:    serieLin maCom, maCom2;    int fdPort, fdPort2;    string nomPortSerie, nomPortSerie2;    internet reseau;    accesBDD* adbdd;    int etat;    list <stXm> listXMS;    std::time_t tps;    char my_phone_number[14];    char mmsAPN[8];    char mmsCentre[30];    char mmsCentreH[30];    char mmsCentreIP[17];    char mmsProxy[17];    string ipInterrupt1;    unsigned int mmsPort;    char aux_string[356];    char textSms[145];    unsigned char imageMMS[308000]; //taille maxi d'un MMS    char textMMS[15360];    string contact[10];    string numReqSms;    struct timeval tv;    pthread_mutex_t* myMutex;    string dt;    boolean etatReseau;public:    SIM();    virtual ~SIM();    string dateL();    void setNomPort(string, string);    string getNumReqSms();    void setAdMutex(pthread_mutex_t*);    int ouvertureSerie(string);    int ouvertureSerie2(string);    int envSMS(string, string);    int envMMS(string, string, string, string);    void recepSMS();    void diffSMS(string, string);    void diffMMS(string, string, string, string);    void envImgFtp(string);    void setAdBDD(accesBDD*);    void traitRecepSms(string);    void SendXMS();    void pushListXms(stXm);};#endif /* SIM_H */